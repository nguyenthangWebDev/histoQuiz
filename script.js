$(document).ready(function() {
    let currentTopic = '';
    let currentQuestions = [];
    let currentQuestionIndex = 0;
    let score = 0;
    let timeLeft = 0;
    let timer = null;
    let userAnswers = []; // M·∫£ng l∆∞u c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng
    let resultsChart = null; // Bi·∫øn l∆∞u bi·ªÉu ƒë·ªì k·∫øt qu·∫£
    let isRandomMode = false; // Bi·∫øn ƒë√°nh d·∫•u ch·∫ø ƒë·ªô ng·∫´u nhi√™n
    let initialTimeLimit = 0; // L∆∞u th·ªùi gian ban ƒë·∫ßu
    let questionCache = {}; // Cache d·ªØ li·ªáu c√¢u h·ªèi

    // Ki·ªÉm tra v√† n·∫°p cache c√¢u h·ªèi t·ª´ localStorage
    initializeQuestionCache();

    // Hi·ªÉn th·ªã th√¥ng b√°o ch√†o m·ª´ng sau khi trang t·∫£i xong
    setTimeout(() => {
        showQuickToast('Ch√†o m·ª´ng ƒë·∫øn v·ªõi HistoQuiz! üéì', 'success', 3000);
    }, 1000);

    // Ki·ªÉm tra v√† kh√¥i ph·ª•c tr·∫°ng th√°i t·ª´ localStorage n·∫øu c√≥
    initializeFromLocalStorage();

    // X·ª≠ l√Ω s·ª± ki·ªán ch·ªçn ch·ªß ƒë·ªÅ
    $('.topic-card').click(function() {
        const topicIndex = $(this).index();
        let topicName = '';
        
        // Ki·ªÉm tra n·∫øu l√† ch·ªß ƒë·ªÅ "T·∫°o ng·∫´u nhi√™n" (index = 4)
        if (topicIndex === 4) {
            currentTopic = 'random';
            isRandomMode = true;
            topicName = 'Ng·∫´u nhi√™n';
        } else {
            // √Ånh x·∫° index c·ªßa topic-card sang key trong quizQuestions
            const topicMapping = {
                0: 'bac-thuoc-va-khoi-nghia',  // Th·ª© nh·∫•t - Th·ªùi k·ª≥ B·∫Øc thu·ªôc
                1: 'thoi-ky-dai-viet',         // Th·ª© hai - Th·ªùi k·ª≥ ƒê·∫°i Vi·ªát
                2: 'cach-mang-viet-nam',       // Th·ª© ba - C√°ch m·∫°ng Vi·ªát Nam
                3: 'viet-nam-hien-dai'         // Th·ª© t∆∞ - Vi·ªát Nam hi·ªán ƒë·∫°i
            };
            
            currentTopic = topicMapping[topicIndex];
            isRandomMode = false;
            
            // L·∫•y t√™n ch·ªß ƒë·ªÅ hi·ªÉn th·ªã
            switch(currentTopic) {
                case 'thoi-ky-dai-viet':
                    topicName = 'Th·ªùi k·ª≥ ƒê·∫°i Vi·ªát';
                    break;
                case 'cach-mang-viet-nam':
                    topicName = 'C√°ch m·∫°ng Vi·ªát Nam';
                    break;
                case 'viet-nam-hien-dai':
                    topicName = 'Vi·ªát Nam hi·ªán ƒë·∫°i';
                    break;
                case 'bac-thuoc-va-khoi-nghia':
                    topicName = 'Th·ªùi k·ª≥ B·∫Øc thu·ªôc';
                    break;
            }
        }
        
        $('#topic-selection').hide();
        $('#quiz-config').show();
        
        // Hi·ªÉn th·ªã th√¥ng b√°o ƒë√£ ch·ªçn ch·ªß ƒë·ªÅ
        showQuickToast(`ƒê√£ ch·ªçn ch·ªß ƒë·ªÅ: ${topicName}`, 'info', 2000);
        
        // L∆∞u ch·ªß ƒë·ªÅ ƒë√£ ch·ªçn
        saveStateToLocalStorage();
    });

    // X·ª≠ l√Ω s·ª± ki·ªán khi ch·ªçn radio button cho c√°c t√πy ch·ªçn
    $('.question-count-radio').change(function() {
        // Ch·ªâ x√≥a trong nh√≥m c√°c n√∫t s·ªë c√¢u h·ªèi
        $('.question-count-radio').siblings('.option-box').removeClass('bg-blue-500 text-white');
        $(this).siblings('.option-box').addClass('bg-blue-500 text-white');
        saveStateToLocalStorage();
    });
    
    $('.time-limit-radio').change(function() {
        $('.time-limit-radio').siblings('.option-box').removeClass('bg-green-500 text-white');
        $(this).siblings('.option-box').addClass('bg-green-500 text-white');
        saveStateToLocalStorage();
    });
    
    $('.difficulty-radio').change(function() {
        $('.difficulty-radio').siblings('.option-box').removeClass('bg-purple-500 text-white');
        $(this).siblings('.option-box').addClass('bg-purple-500 text-white');
        saveStateToLocalStorage();
    });
    
    // T·ª± ƒë·ªông ch·ªçn radio button ƒë·∫ßu ti√™n trong m·ªói nh√≥m
    $('.question-count-radio:first').prop('checked', true).trigger('change');
    $('.time-limit-radio:first').prop('checked', true).trigger('change');
    $('.difficulty-radio:first').prop('checked', true).trigger('change');

    // X·ª≠ l√Ω s·ª± ki·ªán b·∫Øt ƒë·∫ßu quiz
    $('#start-quiz').click(function() {
        // L·∫•y gi√° tr·ªã t·ª´ radio button thay v√¨ dropdown
        const questionCount = parseInt($('input[name="question-count"]:checked').val());
        const timeLimit = parseInt($('input[name="time-limit"]:checked').val());
        const difficulty = $('input[name="difficulty"]:checked').val();
        
        initialTimeLimit = timeLimit * 60; // L∆∞u th·ªùi gian ban ƒë·∫ßu

        // L·∫•y v√† tr·ªôn c√¢u h·ªèi ng·∫´u nhi√™n
        if (isRandomMode) {
            // N·∫øu l√† ch·∫ø ƒë·ªô ng·∫´u nhi√™n, l·∫•y c√¢u h·ªèi t·ª´ t·∫•t c·∫£ ch·ªß ƒë·ªÅ
            currentQuestions = getRandomQuestionsFromAllTopics(questionCount, difficulty);
        } else {
            // Ki·ªÉm tra xem c√≥ trong cache kh√¥ng
            const cacheKey = `${currentTopic}_${questionCount}_${difficulty}`;
            if (questionCache[cacheKey]) {
                console.log('L·∫•y c√¢u h·ªèi t·ª´ cache: ' + cacheKey);
                currentQuestions = questionCache[cacheKey];
                // Tr·ªôn l·∫°i c√¢u h·ªèi ƒë·ªÉ kh√¥ng b·ªã tr√πng th·ª© t·ª±
                currentQuestions = [...currentQuestions].sort(() => Math.random() - 0.5);
            } else {
                // N·∫øu l√† ch·∫ø ƒë·ªô ch·ªß ƒë·ªÅ c·ª• th·ªÉ
                currentQuestions = shuffleQuestions(quizQuestions[currentTopic], questionCount, difficulty);
                // L∆∞u v√†o cache
                questionCache[cacheKey] = [...currentQuestions];
                saveQuestionCache();
            }
        }
        
        if (currentQuestions.length === 0) {
            customAlert('Kh√¥ng c√≥ ƒë·ªß c√¢u h·ªèi ph√π h·ª£p v·ªõi m·ª©c ƒë·ªô ƒë√£ ch·ªçn!');
            return;
        }

        currentQuestionIndex = 0;
        score = 0;
        timeLeft = timeLimit * 60;
        userAnswers = []; // Reset c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng

        $('#quiz-config').hide();
        $('#quiz-section').show();
        $('#total-questions').text(currentQuestions.length);
        
        // Hi·ªÉn th·ªã th√¥ng b√°o b·∫Øt ƒë·∫ßu
        let difficultyText = '';
        switch(difficulty) {
            case 'easy':
                difficultyText = 'D·ªÖ';
                break;
            case 'medium':
                difficultyText = 'Trung b√¨nh';
                break;
            case 'hard':
                difficultyText = 'Kh√≥';
                break;
        }
        
        showQuickToast(`B·∫Øt ƒë·∫ßu b√†i ki·ªÉm tra ${difficultyText} v·ªõi ${questionCount} c√¢u h·ªèi`, 'info', 3000);
        
        displayQuestion();
        startTimer();
        
        // L∆∞u tr·∫°ng th√°i khi b·∫Øt ƒë·∫ßu l√†m b√†i
        saveStateToLocalStorage();
    });

    // H√†m l·∫•y c√¢u h·ªèi ng·∫´u nhi√™n t·ª´ t·∫•t c·∫£ ch·ªß ƒë·ªÅ
    function getRandomQuestionsFromAllTopics(count, difficulty) {
        // T·∫°o m·∫£ng ch·ª©a t·∫•t c·∫£ c√¢u h·ªèi t·ª´ t·∫•t c·∫£ ch·ªß ƒë·ªÅ ph√π h·ª£p v·ªõi ƒë·ªô kh√≥
        let allQuestions = [];
        
        // Duy·ªát qua t·∫•t c·∫£ ch·ªß ƒë·ªÅ v√† l·∫•y c√¢u h·ªèi theo ƒë·ªô kh√≥
        Object.keys(quizQuestions).forEach(topic => {
            quizQuestions[topic].forEach(question => {
                if (question.difficulty === difficulty) {
                    // Th√™m th√¥ng tin ch·ªß ƒë·ªÅ v√†o c√¢u h·ªèi ƒë·ªÉ hi·ªÉn th·ªã khi c·∫ßn
                    const questionWithTopic = {...question, topic: topic};
                    allQuestions.push(questionWithTopic);
                }
            });
        });
        
        // Tr·ªôn v√† l·∫•y s·ªë l∆∞·ª£ng c√¢u h·ªèi c·∫ßn thi·∫øt
        const shuffled = [...allQuestions].sort(() => Math.random() - 0.5);
        return shuffled.slice(0, Math.min(count, shuffled.length));
    }

    // X·ª≠ l√Ω s·ª± ki·ªán ch·ªçn c√¢u tr·∫£ l·ªùi
    $('#answers').off('click', '.answer-option').on('click', '.answer-option', function() {
        $('.answer-option').removeClass('bg-blue-200 scale-105').addClass('bg-white');
        $(this).removeClass('bg-white').addClass('bg-blue-200 scale-105');
        
        // L∆∞u tr·∫°ng th√°i khi ch·ªçn c√¢u tr·∫£ l·ªùi
        saveStateToLocalStorage();
    });

    // X·ª≠ l√Ω s·ª± ki·ªán next question
    $('#next-question').click(function() {
        const selectedAnswer = $('#answers .bg-blue-200').index();
        
        if (selectedAnswer === -1) {
            customAlert('Vui l√≤ng ch·ªçn m·ªôt c√¢u tr·∫£ l·ªùi!');
            return;
        }

        // L∆∞u c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng
        saveUserAnswer(selectedAnswer);

        currentQuestionIndex++;

        if (currentQuestionIndex < currentQuestions.length) {
            displayQuestion();
            // Hi·ªÉn th·ªã th√¥ng b√°o ti·∫øp theo n·∫øu kh√¥ng ph·∫£i c√¢u cu·ªëi
            showQuickToast(`ƒê√£ l∆∞u c√¢u tr·∫£ l·ªùi ${currentQuestionIndex}/${currentQuestions.length}`, 'success', 1500);
        } else {
            showQuickToast('ƒêang x·ª≠ l√Ω k·∫øt qu·∫£...', 'info', 1500);
            setTimeout(() => {
                endQuiz();
            }, 1000);
        }
        
        // L∆∞u tr·∫°ng th√°i sau khi chuy·ªÉn c√¢u h·ªèi
        saveStateToLocalStorage();
    });

    // X·ª≠ l√Ω s·ª± ki·ªán prev question
    $('#prev-question').click(function() {
        if (currentQuestionIndex > 0) {
            // L∆∞u c√¢u tr·∫£ l·ªùi hi·ªán t·∫°i n·∫øu ƒë√£ ch·ªçn
            const selectedAnswer = $('#answers .bg-blue-200').index();
            if (selectedAnswer !== -1) {
                saveUserAnswer(selectedAnswer);
            }
            
            // Quay l·∫°i c√¢u h·ªèi tr∆∞·ªõc
            currentQuestionIndex--;
            displayQuestion();
            
            // Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi ƒë√£ ch·ªçn tr∆∞·ªõc ƒë√≥ (n·∫øu c√≥)
            const prevAnswer = userAnswers.find(a => a.questionIndex === currentQuestionIndex);
            if (prevAnswer) {
                $('.answer-option').eq(prevAnswer.userAnswer).removeClass('bg-white').addClass('bg-blue-200 scale-105');
            }
            
            // Hi·ªÉn th·ªã th√¥ng b√°o quay l·∫°i
            showQuickToast(`Quay l·∫°i c√¢u ${currentQuestionIndex + 1}`, 'info', 1500);
            
            // L∆∞u tr·∫°ng th√°i sau khi quay l·∫°i c√¢u tr∆∞·ªõc
            saveStateToLocalStorage();
        }
    });

    // H√†m l∆∞u c√¢u tr·∫£ l·ªùi ng∆∞·ªùi d√πng
    function saveUserAnswer(selectedAnswer) {
        // Ki·ªÉm tra xem ƒë√£ c√≥ c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi n√†y ch∆∞a
        const existingAnswerIndex = userAnswers.findIndex(a => a.questionIndex === currentQuestionIndex);
        
        const answerData = {
            questionIndex: currentQuestionIndex,
            userAnswer: selectedAnswer,
            correctAnswer: currentQuestions[currentQuestionIndex].correct,
            isCorrect: selectedAnswer === currentQuestions[currentQuestionIndex].correct
        };
        
        if (existingAnswerIndex !== -1) {
            // C·∫≠p nh·∫≠t c√¢u tr·∫£ l·ªùi ƒë√£ t·ªìn t·∫°i
            const oldAnswer = userAnswers[existingAnswerIndex];
            userAnswers[existingAnswerIndex] = answerData;
            
            // C·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë n·∫øu thay ƒë·ªïi tr·∫°ng th√°i ƒë√∫ng/sai
            if (oldAnswer.isCorrect && !answerData.isCorrect) {
                score--; // Tr·ª´ ƒëi·ªÉm n·∫øu tr∆∞·ªõc ƒë√≥ ƒë√∫ng nh∆∞ng gi·ªù sai
            } else if (!oldAnswer.isCorrect && answerData.isCorrect) {
                score++; // C·ªông ƒëi·ªÉm n·∫øu tr∆∞·ªõc ƒë√≥ sai nh∆∞ng gi·ªù ƒë√∫ng
            }
        } else {
            // Th√™m c√¢u tr·∫£ l·ªùi m·ªõi
            userAnswers.push(answerData);
            
            // C·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë
            if (answerData.isCorrect) {
                score++;
            }
        }
    }

    // X·ª≠ l√Ω s·ª± ki·ªán l√†m l·∫°i quiz
    $('#retry-quiz').click(function() {
        $('#results-section').hide();
        $('#quiz-config').show();
        
        // H·ªßy bi·ªÉu ƒë·ªì c≈© n·∫øu c√≥
        if (resultsChart) {
            resultsChart.destroy();
            resultsChart = null;
        }
        
        // X√≥a tr·∫°ng th√°i hi·ªán t·∫°i kh·ªèi localStorage
        clearQuizState();
    });

    // X·ª≠ l√Ω s·ª± ki·ªán quay l·∫°i ch·ªçn ch·ªß ƒë·ªÅ
    $('#back-to-topics').click(function() {
        $('#results-section').hide();
        $('#topic-selection').show();
        
        // H·ªßy bi·ªÉu ƒë·ªì c≈© n·∫øu c√≥
        if (resultsChart) {
            resultsChart.destroy();
            resultsChart = null;
        }
        
        // X√≥a tr·∫°ng th√°i hi·ªán t·∫°i kh·ªèi localStorage
        clearQuizState();
    });

    // X·ª≠ l√Ω s·ª± ki·ªán n√∫t quay l·∫°i (t·ª´ quiz t·ªõi c·∫•u h√¨nh)
    $('#back-button').click(function() {
        // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n
        customConfirm('B·∫°n c√≥ ch·∫Øc mu·ªën quay l·∫°i? Ti·∫øn tr√¨nh c·ªßa b·∫°n s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u.', function() {
            // D·ª´ng b·ªô ƒë·∫øm th·ªùi gian
            clearInterval(timer);
            timer = null;
            
            // ·∫®n ph·∫ßn quiz v√† hi·ªÉn th·ªã l·∫°i ph·∫ßn c·∫•u h√¨nh
            $('#quiz-section').hide();
            $('#quiz-config').show();
            
            // Reset c√°c gi√° tr·ªã
            currentQuestionIndex = 0;
            score = 0;
            userAnswers = [];
            
            // ·∫®n n√∫t prev-question v√† reset text c·ªßa n√∫t next-question
            $('#prev-question').addClass('hidden');
            $('#next-question').text('C√¢u ti·∫øp theo');
            
            // X√≥a tr·∫°ng th√°i hi·ªán t·∫°i kh·ªèi localStorage
            clearQuizState();
        });
    });

    // X·ª≠ l√Ω s·ª± ki·ªán n√∫t quay l·∫°i t·ª´ c·∫•u h√¨nh t·ªõi ch·ªçn ch·ªß ƒë·ªÅ
    $('#config-back-button').click(function() {
        $('#quiz-config').hide();
        $('#topic-selection').show();
        
        // X√≥a d·ªØ li·ªáu ch·ªß ƒë·ªÅ ƒë√£ ch·ªçn
        clearQuizState();
    });

    // H√†m hi·ªÉn th·ªã c√¢u h·ªèi
    function displayQuestion() {
        const question = currentQuestions[currentQuestionIndex];
        $('#current-question').text(currentQuestionIndex + 1);
        
        // Hi·ªÉn th·ªã ho·∫∑c ·∫©n n√∫t quay l·∫°i d·ª±a v√†o v·ªã tr√≠ c√¢u h·ªèi
        if (currentQuestionIndex > 0) {
            $('#prev-question').removeClass('hidden');
        } else {
            $('#prev-question').addClass('hidden');
        }
        
        // C·∫≠p nh·∫≠t text c·ªßa n√∫t next question
        if (currentQuestionIndex === currentQuestions.length - 1) {
            $('#next-question').text('Ho√†n th√†nh');
        } else {
            $('#next-question').text('C√¢u ti·∫øp theo');
        }
        
        // Hi·ªÉn th·ªã c√¢u h·ªèi, th√™m th√¥ng tin ch·ªß ƒë·ªÅ n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô ng·∫´u nhi√™n
        if (isRandomMode && question.topic) {
            let topicName = '';
            switch(question.topic) {
                case 'thoi-ky-dai-viet':
                    topicName = 'Th·ªùi k·ª≥ ƒê·∫°i Vi·ªát';
                    break;
                case 'cach-mang-viet-nam':
                    topicName = 'C√°ch m·∫°ng Vi·ªát Nam';
                    break;
                case 'viet-nam-hien-dai':
                    topicName = 'Vi·ªát Nam hi·ªán ƒë·∫°i';
                    break;
                case 'bac-thuoc-va-khoi-nghia':
                    topicName = 'Th·ªùi k·ª≥ B·∫Øc thu·ªôc';
                    break;
            }
            $('#question-content p').html(`<span class="text-xs font-semibold px-2 py-1 rounded bg-blue-200 text-blue-800 mr-2">${topicName}</span> ${question.question}`);
        } else {
            $('#question-content p').text(question.question);
        }
        
        const answersHtml = question.answers.map((answer, index) => `
            <div class="answer-option bg-white border border-blue-100 p-3.5 rounded-lg cursor-pointer hover:bg-blue-50 transition-all duration-300 text-base mb-2 sm:mb-0 shadow-sm hover:shadow flex items-center">
                <span class="inline-flex items-center justify-center w-6 h-6 rounded-full border border-blue-200 text-blue-600 mr-3 font-medium">${String.fromCharCode(65 + index)}</span>
                ${answer}
            </div>
        `).join('');
        
        $('#answers').html(answersHtml);
    }

    // H√†m tr·ªôn v√† l·ªçc c√¢u h·ªèi theo ƒë·ªô kh√≥
    function shuffleQuestions(questions, count, difficulty) {
        const filteredQuestions = questions.filter(q => q.difficulty === difficulty);
        const shuffled = [...filteredQuestions].sort(() => Math.random() - 0.5);
        return shuffled.slice(0, Math.min(count, shuffled.length));
    }

    // H√†m b·∫Øt ƒë·∫ßu ƒë·∫øm th·ªùi gian
    function startTimer() {
        if (timer) clearInterval(timer);
        
        timer = setInterval(function() {
            timeLeft--;
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            $('#timer').text(`${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`);

            // L∆∞u tr·∫°ng th√°i m·ªói 5 gi√¢y ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng hi·ªáu su·∫•t
            if (timeLeft % 5 === 0) {
                saveStateToLocalStorage();
            }

            if (timeLeft <= 0) {
                endQuiz();
            }
        }, 1000);
    }

    // H√†m k·∫øt th√∫c quiz
    function endQuiz() {
        clearInterval(timer);
        $('#quiz-section').hide();
        $('#results-section').show();
        
        // T√≠nh to√°n k·∫øt qu·∫£
        const correctCount = score;
        const wrongCount = currentQuestions.length - score;
        const percentage = Math.round((score / currentQuestions.length) * 100);
        
        // Hi·ªÉn th·ªã th√¥ng tin k·∫øt qu·∫£
        $('#score').text(score);
        $('#max-score').text(currentQuestions.length);
        $('#score-percentage').text(percentage);
        $('#progress-bar').css('width', percentage + '%');
        $('#correct-answers').text(correctCount);
        $('#wrong-answers').text(wrongCount);
        
        // C·∫≠p nh·∫≠t badge k·∫øt qu·∫£
        updateResultBadge(percentage);
        
        // Thay ƒë·ªïi m√†u s·∫Øc c·ªßa progress bar theo k·∫øt qu·∫£
        updateProgressBarColor(percentage);
        
        // T√≠nh v√† hi·ªÉn th·ªã th·ªùi gian ho√†n th√†nh
        const timeSpentSeconds = initialTimeLimit - timeLeft;
        
        // Ph√¢n t√°ch th√†nh ph√∫t v√† gi√¢y
        const minutes = Math.floor(timeSpentSeconds / 60);
        const seconds = timeSpentSeconds % 60;
        
        // Hi·ªÉn th·ªã th·ªùi gian
        $('#completion-time-minutes').text(minutes);
        $('#completion-time-seconds').text(seconds);
        
        // Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì k·∫øt qu·∫£
        createResultsChart(correctCount, wrongCount);
        
        // Hi·ªÉn th·ªã chi ti·∫øt k·∫øt qu·∫£
        displayDetailedResults();
        
        // Hi·ªÉn th·ªã th√¥ng b√°o k·∫øt qu·∫£
        let resultMessage, resultType;
        if (percentage >= 80) {
            resultMessage = 'Xu·∫•t s·∫Øc! B·∫°n ƒë√£ ho√†n th√†nh b√†i ki·ªÉm tra v·ªõi k·∫øt qu·∫£ r·∫•t t·ªët!';
            resultType = 'success';
        } else if (percentage >= 60) {
            resultMessage = 'T·ªët! B·∫°n ƒë√£ ho√†n th√†nh b√†i ki·ªÉm tra.';
            resultType = 'success';
        } else if (percentage >= 40) {
            resultMessage = 'B·∫°n ƒë√£ ho√†n th√†nh b√†i ki·ªÉm tra. H√£y √¥n t·∫≠p th√™m nh√©!';
            resultType = 'warning';
        } else {
            resultMessage = 'B·∫°n c·∫ßn c·ªë g·∫Øng h∆°n. H√£y √¥n t·∫≠p l·∫°i ki·∫øn th·ª©c!';
            resultType = 'warning';
        }
        
        showQuickToast(resultMessage, resultType, 4000);
        
        // X√≥a tr·∫°ng th√°i quiz kh·ªèi localStorage v√¨ ƒë√£ ho√†n th√†nh
        clearQuizState();
    }
    
    // H√†m c·∫≠p nh·∫≠t badge k·∫øt qu·∫£
    function updateResultBadge(percentage) {
        let badgeText, badgeClass;
        
        if (percentage >= 90) {
            badgeText = 'Xu·∫•t s·∫Øc';
            badgeClass = 'bg-purple-100 text-purple-800';
        } else if (percentage >= 80) {
            badgeText = 'Gi·ªèi';
            badgeClass = 'bg-green-100 text-green-800';
        } else if (percentage >= 65) {
            badgeText = 'Kh√°';
            badgeClass = 'bg-blue-100 text-blue-800';
        } else if (percentage >= 50) {
            badgeText = 'Trung b√¨nh';
            badgeClass = 'bg-yellow-100 text-yellow-800';
        } else {
            badgeText = 'C·∫ßn c·ªë g·∫Øng';
            badgeClass = 'bg-red-100 text-red-800';
        }
        
        $('#result-badge')
            .text(badgeText)
            .removeClass('bg-blue-100 bg-green-100 bg-yellow-100 bg-red-100 bg-purple-100 text-blue-800 text-green-800 text-yellow-800 text-red-800 text-purple-800')
            .addClass(badgeClass);
    }
    
    // H√†m c·∫≠p nh·∫≠t m√†u s·∫Øc progress bar
    function updateProgressBarColor(percentage) {
        if (percentage >= 80) {
            $('#progress-bar').removeClass('bg-blue-600 bg-yellow-500 bg-red-500').addClass('bg-green-500');
        } else if (percentage >= 60) {
            $('#progress-bar').removeClass('bg-green-500 bg-yellow-500 bg-red-500').addClass('bg-blue-600');
        } else if (percentage >= 40) {
            $('#progress-bar').removeClass('bg-green-500 bg-blue-600 bg-red-500').addClass('bg-yellow-500');
        } else {
            $('#progress-bar').removeClass('bg-green-500 bg-blue-600 bg-yellow-500').addClass('bg-red-500');
        }
    }
    
    // H√†m t·∫°o bi·ªÉu ƒë·ªì k·∫øt qu·∫£
    function createResultsChart(correctCount, wrongCount) {
        // H·ªßy bi·ªÉu ƒë·ªì c≈© n·∫øu c√≥
        if (resultsChart) {
            resultsChart.destroy();
        }
        
        const ctx = document.getElementById('results-chart').getContext('2d');
        resultsChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['ƒê√∫ng', 'Sai'],
                datasets: [{
                    data: [correctCount, wrongCount],
                    backgroundColor: ['#10B981', '#EF4444'],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            boxWidth: 12,
                            padding: 10,
                            font: {
                                size: window.innerWidth < 640 ? 10 : 12
                            }
                        }
                    },
                    tooltip: {
                        bodyFont: {
                            size: window.innerWidth < 640 ? 10 : 12
                        },
                        titleFont: {
                            size: window.innerWidth < 640 ? 11 : 14
                        }
                    }
                }
            }
        });
    }

    // H√†m hi·ªÉn th·ªã chi ti·∫øt k·∫øt qu·∫£
    function displayDetailedResults() {
        let detailedResultsHtml = '';
        
        userAnswers.forEach((answer, index) => {
            const question = currentQuestions[answer.questionIndex];
            const userAnswerText = question.answers[answer.userAnswer];
            const correctAnswerText = question.answers[answer.correctAnswer];
            const resultClass = answer.isCorrect ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200';
            const resultIcon = answer.isCorrect ? 
                '<span class="text-green-500">‚úì</span>' : 
                '<span class="text-red-500">‚úó</span>';
            
            // Th√™m nh√£n ch·ªß ƒë·ªÅ n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô ng·∫´u nhi√™n
            let topicLabel = '';
            if (isRandomMode && question.topic) {
                let topicName = '';
                let topicClass = '';
                
                switch(question.topic) {
                    case 'thoi-ky-dai-viet':
                        topicName = 'Th·ªùi k·ª≥ ƒê·∫°i Vi·ªát';
                        topicClass = 'bg-blue-100 text-blue-800';
                        break;
                    case 'cach-mang-viet-nam':
                        topicName = 'C√°ch m·∫°ng Vi·ªát Nam';
                        topicClass = 'bg-red-100 text-red-800';
                        break;
                    case 'viet-nam-hien-dai':
                        topicName = 'Vi·ªát Nam hi·ªán ƒë·∫°i';
                        topicClass = 'bg-green-100 text-green-800';
                        break;
                    case 'bac-thuoc-va-khoi-nghia':
                        topicName = 'Th·ªùi k·ª≥ B·∫Øc thu·ªôc';
                        topicClass = 'bg-purple-100 text-purple-800';
                        break;
                }
                
                topicLabel = `<span class="text-xs font-semibold px-2 py-1 rounded ${topicClass} ml-2 mt-1 inline-block">${topicName}</span>`;
            }
            
            // T·∫°o m·ªôt giao di·ªán chi ti·∫øt th√¢n thi·ªán v·ªõi thi·∫øt b·ªã di ƒë·ªông h∆°n
            detailedResultsHtml += `
                <div class="${resultClass} p-3 sm:p-4 rounded-lg border">
                    <div class="flex flex-wrap justify-between items-center mb-1">
                        <div class="font-semibold text-sm sm:text-base mb-1 sm:mb-0">
                            C√¢u ${index + 1}: ${resultIcon}
                        </div>
                        <div class="flex items-center">
                            <div class="text-gray-600 text-xs sm:text-sm px-2 py-1 rounded-full ${answer.isCorrect ? 'bg-green-100' : 'bg-red-100'}">
                                ${answer.isCorrect ? 'ƒê√∫ng' : 'Sai'}
                            </div>
                            ${topicLabel}
                        </div>
                    </div>
                    <p class="mt-2 text-sm sm:text-base border-t border-gray-100 pt-2">${question.question}</p>
                    <div class="mt-2 bg-white bg-opacity-60 p-2 rounded">
                        <div class="text-xs sm:text-sm text-gray-600 font-medium">C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n:</div>
                        <div class="${answer.isCorrect ? 'text-green-600' : 'text-red-600'} font-medium text-sm sm:text-base pl-2 border-l-2 ${answer.isCorrect ? 'border-green-400' : 'border-red-400'} mt-1">
                            ${userAnswerText}
                        </div>
                    </div>
                    ${!answer.isCorrect ? `
                        <div class="mt-2 bg-white bg-opacity-60 p-2 rounded">
                            <div class="text-xs sm:text-sm text-gray-600 font-medium">ƒê√°p √°n ƒë√∫ng:</div>
                            <div class="text-green-600 font-medium text-sm sm:text-base pl-2 border-l-2 border-green-400 mt-1">
                                ${correctAnswerText}
                            </div>
                        </div>
                    ` : ''}
                </div>
            `;
        });
        
        $('#detailed-results').html(detailedResultsHtml);
    }

    // H√†m l∆∞u tr·∫°ng th√°i v√†o localStorage
    function saveStateToLocalStorage() {
        // Ch·ªâ l∆∞u khi ƒëang trong qu√° tr√¨nh l√†m b√†i
        if ($('#quiz-section').is(':visible')) {
            const quizState = {
                currentTopic: currentTopic,
                isRandomMode: isRandomMode,
                currentQuestions: currentQuestions,
                currentQuestionIndex: currentQuestionIndex,
                score: score,
                timeLeft: timeLeft,
                userAnswers: userAnswers,
                questionCount: parseInt($('input[name="question-count"]:checked').val()),
                timeLimit: parseInt($('input[name="time-limit"]:checked').val()),
                difficulty: $('input[name="difficulty"]:checked').val(),
                initialTimeLimit: initialTimeLimit,
                lastUpdated: new Date().getTime()
            };
            
            localStorage.setItem('histoQuizState', JSON.stringify(quizState));
            
            // Hi·ªÉn th·ªã th√¥ng b√°o l∆∞u tr·∫°ng th√°i m·ªói 30 gi√¢y
            if (timeLeft % 30 === 0 && timeLeft > 0) {
                showQuickToast('Ti·∫øn tr√¨nh c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông', 'info', 2000);
            }
        } 
        // L∆∞u tr·∫°ng th√°i c·∫•u h√¨nh n·∫øu ƒëang ·ªü m√†n h√¨nh c·∫•u h√¨nh
        else if ($('#quiz-config').is(':visible')) {
            const configState = {
                currentTopic: currentTopic,
                isRandomMode: isRandomMode,
                questionCount: parseInt($('input[name="question-count"]:checked').val()),
                timeLimit: parseInt($('input[name="time-limit"]:checked').val()),
                difficulty: $('input[name="difficulty"]:checked').val(),
                screen: 'config',
                lastUpdated: new Date().getTime()
            };
            
            localStorage.setItem('histoQuizState', JSON.stringify(configState));
        }
    }
    
    // H√†m kh√¥i ph·ª•c tr·∫°ng th√°i t·ª´ localStorage
    function initializeFromLocalStorage() {
        const savedState = localStorage.getItem('histoQuizState');
        
        if (savedState) {
            const state = JSON.parse(savedState);
            
            // Ki·ªÉm tra n·∫øu tr·∫°ng th√°i ƒë∆∞·ª£c l∆∞u trong v√≤ng 2 gi·ªù
            const twoHoursInMs = 2 * 60 * 60 * 1000;
            const isStateValid = (new Date().getTime() - state.lastUpdated) < twoHoursInMs;
            
            if (isStateValid) {
                // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n ƒë·ªÉ ti·∫øp t·ª•c phi√™n tr∆∞·ªõc
                if (state.screen !== 'config' && state.currentQuestions && state.currentQuestions.length > 0) {
                    const minutesAgo = Math.floor((new Date().getTime() - state.lastUpdated) / 60000);
                    const minutesLeft = Math.floor(state.timeLeft / 60);
                    const secondsLeft = state.timeLeft % 60;
                    
                    customConfirm(
                        `<div class="text-center">
                            <div class="mb-2">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-blue-500 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                </svg>
                                <p class="text-lg font-medium">Ph√°t hi·ªán b√†i l√†m tr∆∞·ªõc ƒë√≥</p>
                            </div>
                            <div class="bg-blue-50 p-3 rounded-lg mb-3 text-left">
                                <p class="mb-1"><span class="font-semibold">Th·ªùi gian:</span> ${minutesAgo} ph√∫t tr∆∞·ªõc</p>
                                <p class="mb-1"><span class="font-semibold">Ti·∫øn ƒë·ªô:</span> C√¢u ${state.currentQuestionIndex + 1}/${state.currentQuestions.length}</p>
                                <p><span class="font-semibold">Th·ªùi gian c√≤n l·∫°i:</span> ${minutesLeft}:${String(secondsLeft).padStart(2, '0')}</p>
                            </div>
                            <p>B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c l√†m b√†i kh√¥ng?</p>
                        </div>`,
                        function() {
                            // Kh√¥i ph·ª•c tr·∫°ng th√°i
                            restoreState(state);
                        },
                        function() {
                            // X√≥a tr·∫°ng th√°i c≈©
                            clearQuizState();
                        }
                    );
                    return;
                }
                
                // Kh√¥i ph·ª•c tr·∫°ng th√°i m√†n h√¨nh c·∫•u h√¨nh
                if (state.screen === 'config') {
                    currentTopic = state.currentTopic;
                    isRandomMode = state.isRandomMode;
                    
                    // Hi·ªÉn th·ªã m√†n h√¨nh c·∫•u h√¨nh
                    $('#topic-selection').hide();
                    $('#quiz-config').show();
                    
                    // Ch·ªçn c√°c radio button t∆∞∆°ng ·ª©ng
                    $(`input[name="question-count"][value="${state.questionCount}"]`).prop('checked', true).trigger('change');
                    $(`input[name="time-limit"][value="${state.timeLimit}"]`).prop('checked', true).trigger('change');
                    $(`input[name="difficulty"][value="${state.difficulty}"]`).prop('checked', true).trigger('change');
                    
                    return;
                }
                
                // H√†m kh√¥i ph·ª•c tr·∫°ng th√°i
                restoreState(state);
            } else {
                // Tr·∫°ng th√°i qu√° c≈©, x√≥a ƒëi
                clearQuizState();
            }
        }
    }
    
    // H√†m kh√¥i ph·ª•c tr·∫°ng th√°i
    function restoreState(state) {
        // Kh√¥i ph·ª•c tr·∫°ng th√°i ƒëang l√†m quiz
        currentTopic = state.currentTopic;
        isRandomMode = state.isRandomMode;
        currentQuestions = state.currentQuestions;
        currentQuestionIndex = state.currentQuestionIndex;
        score = state.score;
        timeLeft = state.timeLeft;
        userAnswers = state.userAnswers;
        initialTimeLimit = state.initialTimeLimit;
        
        // Ch·ªçn c√°c radio button t∆∞∆°ng ·ª©ng
        $(`input[name="question-count"][value="${state.questionCount}"]`).prop('checked', true).trigger('change');
        $(`input[name="time-limit"][value="${state.timeLimit}"]`).prop('checked', true).trigger('change');
        $(`input[name="difficulty"][value="${state.difficulty}"]`).prop('checked', true).trigger('change');
        
        // Hi·ªÉn th·ªã m√†n h√¨nh quiz v√† b·∫Øt ƒë·∫ßu l·∫°i
        $('#topic-selection').hide();
        $('#quiz-config').hide();
        $('#quiz-section').show();
        $('#total-questions').text(currentQuestions.length);
        
        displayQuestion();
        startTimer();
        
        // Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi ƒë√£ ch·ªçn tr∆∞·ªõc ƒë√≥ (n·∫øu c√≥)
        const currentAnswer = userAnswers.find(a => a.questionIndex === currentQuestionIndex);
        if (currentAnswer) {
            $('.answer-option').eq(currentAnswer.userAnswer).removeClass('bg-white').addClass('bg-blue-200 scale-105');
        }
        
        // Hi·ªÉn th·ªã th√¥ng b√°o nhanh
        showQuickToast('ƒê√£ kh√¥i ph·ª•c b√†i l√†m c·ªßa b·∫°n!', 'success', 3000);
    }
    
    // H√†m x√≥a tr·∫°ng th√°i quiz kh·ªèi localStorage
    function clearQuizState() {
        localStorage.removeItem('histoQuizState');
    }

    // H√†m l∆∞u v√† t·∫£i cache c√¢u h·ªèi
    function initializeQuestionCache() {
        const cachedData = localStorage.getItem('histoQuiz_questionCache');
        if (cachedData) {
            try {
                questionCache = JSON.parse(cachedData);
                console.log('ƒê√£ t·∫£i cache c√¢u h·ªèi t·ª´ localStorage');
            } catch (error) {
                console.error('L·ªói khi ƒë·ªçc cache c√¢u h·ªèi:', error);
                questionCache = {};
            }
        }
    }

    function saveQuestionCache() {
        try {
            localStorage.setItem('histoQuiz_questionCache', JSON.stringify(questionCache));
            console.log('ƒê√£ l∆∞u cache c√¢u h·ªèi v√†o localStorage');
        } catch (error) {
            console.error('L·ªói khi l∆∞u cache c√¢u h·ªèi:', error);
            // N·∫øu l∆∞u th·∫•t b·∫°i (qu√° gi·ªõi h·∫°n localStorage), x√≥a cache c≈©
            clearQuestionCache();
        }
    }

    function clearQuestionCache() {
        questionCache = {};
        localStorage.removeItem('histoQuiz_questionCache');
        console.log('ƒê√£ x√≥a cache c√¢u h·ªèi');
    }

    // X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng quay l·∫°i trang ch·ªçn ch·ªß ƒë·ªÅ
    document.addEventListener('DOMContentLoaded', function() {
        // T·ª± ƒë·ªông x√≥a cache khi ng∆∞·ªùi d√πng quay l·∫°i trang ch·ªß
        if (window.location.hash === '' || window.location.hash === '#') {
            clearQuestionCache();
            localStorage.removeItem('histoQuiz_state');
        }
    });
}); 